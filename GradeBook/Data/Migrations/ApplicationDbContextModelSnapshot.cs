// <auto-generated />
using GradeBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace GradeBook.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GradeBook.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("GradeBook.Data.Assessment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaxScore");

                    b.Property<string>("Name");

                    b.Property<int>("RubricID");

                    b.HasKey("ID");

                    b.HasIndex("RubricID");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("GradeBook.Data.AssessmentGrade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssessmentID");

                    b.Property<int?>("AssignmentID");

                    b.Property<bool>("Completed");

                    b.Property<bool>("Graded");

                    b.Property<int>("Score");

                    b.Property<string>("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("StudentID");

                    b.ToTable("AssessmentGrades");
                });

            modelBuilder.Entity("GradeBook.Data.AssessmentScoreDescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssessmentID");

                    b.Property<string>("Description");

                    b.Property<int>("Score");

                    b.HasKey("ID");

                    b.HasIndex("AssessmentID");

                    b.ToTable("AssessmentScoreDescriptions");
                });

            modelBuilder.Entity("GradeBook.Data.Assignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DueDate");

                    b.Property<int?>("MaxScore");

                    b.Property<int?>("RubricID");

                    b.Property<string>("Title");

                    b.Property<double>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("RubricID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("GradeBook.Data.AssignmentSchoolClass", b =>
                {
                    b.Property<int>("AssignmentID");

                    b.Property<int>("SchoolClassID");

                    b.HasKey("AssignmentID", "SchoolClassID");

                    b.HasIndex("SchoolClassID");

                    b.ToTable("AssignmentSchoolClasses");
                });

            modelBuilder.Entity("GradeBook.Data.Rubric", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Instructions");

                    b.Property<string>("Name");

                    b.Property<string>("TeacherID");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Rubrics");
                });

            modelBuilder.Entity("GradeBook.Data.RubricSchoolClass", b =>
                {
                    b.Property<int>("RubricId");

                    b.Property<int>("SchoolClassId");

                    b.HasKey("RubricId", "SchoolClassId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("RubricSchoolClasses");
                });

            modelBuilder.Entity("GradeBook.Data.RubricScoreHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Header");

                    b.Property<int>("RubricID");

                    b.Property<int>("Score");

                    b.HasKey("ID");

                    b.HasIndex("RubricID");

                    b.ToTable("RubricScoreHeaders");
                });

            modelBuilder.Entity("GradeBook.Data.SchoolClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("TeacherId");

                    b.HasKey("ID");

                    b.HasIndex("TeacherId");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GradeBook.Data.Student", b =>
                {
                    b.HasBaseType("GradeBook.Data.ApplicationUser");

                    b.Property<int>("SchoolClassID");

                    b.Property<int>("StudentClassNumber");

                    b.HasIndex("SchoolClassID");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("GradeBook.Data.Teacher", b =>
                {
                    b.HasBaseType("GradeBook.Data.ApplicationUser");


                    b.ToTable("Teacher");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("GradeBook.Data.Assessment", b =>
                {
                    b.HasOne("GradeBook.Data.Rubric", "Rubric")
                        .WithMany("Assessments")
                        .HasForeignKey("RubricID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.AssessmentGrade", b =>
                {
                    b.HasOne("GradeBook.Data.Assessment", "Assessment")
                        .WithMany("AssessmentGrades")
                        .HasForeignKey("AssessmentID");

                    b.HasOne("GradeBook.Data.Assignment", "Assignment")
                        .WithMany("AssessmentGrades")
                        .HasForeignKey("AssignmentID");

                    b.HasOne("GradeBook.Data.Student", "Student")
                        .WithMany("AssessmentGrades")
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("GradeBook.Data.AssessmentScoreDescription", b =>
                {
                    b.HasOne("GradeBook.Data.Assessment", "Assessment")
                        .WithMany("AssessmentScoreDescriptions")
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.Assignment", b =>
                {
                    b.HasOne("GradeBook.Data.Rubric", "Rubric")
                        .WithMany("Assignments")
                        .HasForeignKey("RubricID");
                });

            modelBuilder.Entity("GradeBook.Data.AssignmentSchoolClass", b =>
                {
                    b.HasOne("GradeBook.Data.Assignment", "Assignment")
                        .WithMany("AssignmentSchoolClasses")
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Data.SchoolClass", "SchoolClass")
                        .WithMany("AssignmentSchoolClasses")
                        .HasForeignKey("SchoolClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.Rubric", b =>
                {
                    b.HasOne("GradeBook.Data.Teacher", "Teacher")
                        .WithMany("Rubrics")
                        .HasForeignKey("TeacherID");
                });

            modelBuilder.Entity("GradeBook.Data.RubricSchoolClass", b =>
                {
                    b.HasOne("GradeBook.Data.Rubric", "Rubric")
                        .WithMany("RubricSchoolClasses")
                        .HasForeignKey("RubricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Data.SchoolClass", "SchoolClass")
                        .WithMany("RubricSchoolClasses")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.RubricScoreHeader", b =>
                {
                    b.HasOne("GradeBook.Data.Rubric", "Rubric")
                        .WithMany("RubricScoreHeaders")
                        .HasForeignKey("RubricID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.SchoolClass", b =>
                {
                    b.HasOne("GradeBook.Data.Teacher", "Teacher")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GradeBook.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GradeBook.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GradeBook.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GradeBook.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GradeBook.Data.Student", b =>
                {
                    b.HasOne("GradeBook.Data.SchoolClass", "SchoolClass")
                        .WithMany("Students")
                        .HasForeignKey("SchoolClassID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
